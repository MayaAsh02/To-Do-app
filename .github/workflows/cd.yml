name: Deploy EKS App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1      
  
      - name: Provision EKS cluster
        run: |
          cd terraform
          terraform init
          yes | terraform apply -auto-approve -lock=false -var "mongo_uri=${{ secrets.ATLAS_CONNECTION_STRING }}"

      - name: Install kubectl
        run: |
          ## Install kubectl for interacting with the EKS cluster
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          ##Configure kubectl to use the EKS cluster
          aws eks update-kubeconfig --name ToDo-app-dev-eks2


      - name: Create metallb-system namespace if not exists
        run: |
          if ! kubectl get namespace metallb-system > /dev/null 2>&1; then
              kubectl create namespace metallb-system
            else
              echo "Namespace metallb-system already exists. Skipping creation."
            fi

      - name: Install Argo CD CLI
        run: |
          curl -LO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Argo CD Application Sync
        run: |
          kubectl config set-context --current --namespace=argocd
          kubectl apply -f argo-cd/application.yml
          argocd app sync ToDo-app-dev-eks-2 --wait